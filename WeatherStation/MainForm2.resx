<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="serialPort1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>15, 9</value>
  </metadata>
  <metadata name="timer_main.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>128, 12</value>
  </metadata>
  <metadata name="mainToolTip.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>578, 9</value>
  </metadata>
  <data name="txtWetLastMin.ToolTip" xml:space="preserve">
    <value>Wet sensor status:
"-" none
"now" - rain was detected during last measure cycle
"rain" - rain was detected during last minute (but not during current cycle)
"wet" - wet  was detected during last minute 
</value>
  </data>
  <metadata name="timer_debug_changetext.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>229, 12</value>
  </metadata>
  <data name="txtCSNeedHeating.ToolTip" xml:space="preserve">
    <value>Cloud sensor needs heating flag.

This is only narrow condition test - if cloud index in given interval and steadily decreasign during last 5 5min cylcles (exact settings are set in Preferences in "CS auto heating settings" group)

But for heating switching on also another conditions must be met:
- since last relay switching on passed at least ... minutes (set in "CS auto heating settings")
- humidity is 100%
- there is no rain now
- it is dark now

</value>
  </data>
  <metadata name="timer_debug_portread.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>404, 11</value>
  </metadata>
  <data name="txt0min.ToolTip" xml:space="preserve">
    <value>Average cloud index value for 5 min intervals every fifth minute of last 60 minutes (e.g. if now 20:56, then fields hold average values for 20:50-20:55, 20:45-20:50 etc)
This field holds data for the newest interval (approx. 0..5 minutes ago)
</value>
  </data>
  <data name="txt5min.ToolTip" xml:space="preserve">
    <value>Average cloud index value for 5 min intervals every fifth minute of last 60 minutes (e.g. if now 20:56, then fields hold average values for 20:50-20:55, 20:45-20:50 etc)
This field holds data for 2nd interval (approx. 10..15 minute ago)</value>
  </data>
  <data name="txt10min.ToolTip" xml:space="preserve">
    <value>Average cloud index value for 5 min intervals every fifth minute of last 60 minutes (e.g. if now 20:56, then fields hold average values for 20:50-20:55, 20:45-20:50 etc)
This field holds data for 3rd interval (approx. 15..20 minute ago)
</value>
  </data>
  <data name="txt15min.ToolTip" xml:space="preserve">
    <value>Average cloud index value for 5 min intervals every fifth minute of last 60 minutes (e.g. if now 20:56, then fields hold average values for 20:50-20:55, 20:45-20:50 etc)
This field holds data for 4th interval (approx. 20..25 minute ago)

</value>
  </data>
  <data name="txt20min.ToolTip" xml:space="preserve">
    <value>Average cloud index value for 5 min intervals every fifth minute of last 60 minutes (e.g. if now 20:56, then fields hold average values for 20:50-20:55, 20:45-20:50 etc)
This field holds data for 5th interval (approx. 25..30 minute ago)

</value>
  </data>
  <metadata name="notifyIcon1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>697, 9</value>
  </metadata>
  <metadata name="contextMenuStrip1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>810, 9</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="notifyIcon1.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAEBAAAAAAAABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAD///8AAAAAAAAAAAAAAAAAp1IyUKdSMv+nUjL/AAAAAP///wD///8AAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA////AAAAAAAAAAAAAAAAAAAAAACnUjL/p1IyUAAAAAD///8A////AAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///wAAAAAAAAAAAAAAAAAAAAAAp1Iy/6dSMoAAAAAA////AP//
        /wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///8AAAAAAAAAAAAAAAAAp1Iy/6dSMv+nUjL/AAAAAP//
        /wD///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////AAAAAAAAAAAAAAAAAKdSMv+nUjL/p1Iy/6dS
        MlD///8A////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///wAAAAAAp1IygAAAAACnUjKxp1Iy/6dS
        Mv+nUjKA////AP///wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///8AAAAAAKdSMoCnUjJQp1IyUKdS
        Mv+nUjL/p1IygP///wD///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////AAAAAACnUjJQp1Iy/6dS
        Mv+nUjL/p1Iy/6dSMoD///8A////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///wAAAAAAAAAAAKdS
        Mv+nUjL/p1Iy/6dSMv+nUjJQ////AP///wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///8Ap1IyJqdS
        MiYAAAANp1Iy/6dSMv+nUjJQAAAAAP///wD///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKdS
        MrGnUjL/p1Iy/6dSMv+nUjL/AAAAAAAAAAD///8A////AAAAAAAAAAAAAAAAAKdSMv8AAAAAAAAAAAAA
        AACnUjL/p1Iy/6dSMv+nUjL/p1Iy/wAAAAAAAAAA////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAp1Iy/6dSMv+nUjKAAAAAAKdSMv+nUjKxAAAAAP///wAAAAAAp1Iy/wAAAAAAAAAAAAAAAAAA
        AAAAAAAA////AAAAAAAAAAAAAAAAAAAAAAAAAAAAp1Iy/wAAAAD///8AAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAP///wAAAAAAAAAAAAAAAAAAAAAAAAAAAKdSMrGnUjKxAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAp1Iy/wAAAAD///8AAAAAAAAAAAAAAAAAAAAAAKdSMrEAAAAAAAAAAAAAAAAAAAAAAAAAAKdS
        Mv8AAAAA/z8AAP9/AAD/PwAA/j8AAP4/AAD6HwAA+x8AAPwfAAD8PwAA/n8AAPB/AABwfwAA8TsAAP+/
        AAD/nwAAv30AAA==
</value>
  </data>
  <metadata name="$this.TrayHeight" type="System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>44</value>
  </metadata>
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAEBAAAAAAAABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAD///8AAAAAAAAAAAAAAAAAp1IyUKdSMv+nUjL/AAAAAP///wD///8AAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA////AAAAAAAAAAAAAAAAAAAAAACnUjL/p1IyUAAAAAD///8A////AAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///wAAAAAAAAAAAAAAAAAAAAAAp1Iy/6dSMoAAAAAA////AP//
        /wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///8AAAAAAAAAAAAAAAAAp1Iy/6dSMv+nUjL/AAAAAP//
        /wD///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////AAAAAAAAAAAAAAAAAKdSMv+nUjL/p1Iy/6dS
        MlD///8A////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///wAAAAAAp1IygAAAAACnUjKxp1Iy/6dS
        Mv+nUjKA////AP///wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///8AAAAAAKdSMoCnUjJQp1IyUKdS
        Mv+nUjL/p1IygP///wD///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////AAAAAACnUjJQp1Iy/6dS
        Mv+nUjL/p1Iy/6dSMoD///8A////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///wAAAAAAAAAAAKdS
        Mv+nUjL/p1Iy/6dSMv+nUjJQ////AP///wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///8Ap1IyJqdS
        MiYAAAANp1Iy/6dSMv+nUjJQAAAAAP///wD///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKdS
        MrGnUjL/p1Iy/6dSMv+nUjL/AAAAAAAAAAD///8A////AAAAAAAAAAAAAAAAAKdSMv8AAAAAAAAAAAAA
        AACnUjL/p1Iy/6dSMv+nUjL/p1Iy/wAAAAAAAAAA////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAp1Iy/6dSMv+nUjKAAAAAAKdSMv+nUjKxAAAAAP///wAAAAAAp1Iy/wAAAAAAAAAAAAAAAAAA
        AAAAAAAA////AAAAAAAAAAAAAAAAAAAAAAAAAAAAp1Iy/wAAAAD///8AAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAP///wAAAAAAAAAAAAAAAAAAAAAAAAAAAKdSMrGnUjKxAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAp1Iy/wAAAAD///8AAAAAAAAAAAAAAAAAAAAAAKdSMrEAAAAAAAAAAAAAAAAAAAAAAAAAAKdS
        Mv8AAAAA/z8AAP9/AAD/PwAA/j8AAP4/AAD6HwAA+x8AAPwfAAD8PwAA/n8AAPB/AABwfwAA8TsAAP+/
        AAD/nwAAv30AAA==
</value>
  </data>
</root>